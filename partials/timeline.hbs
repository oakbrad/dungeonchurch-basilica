<!-- Timeline Component -->
<link rel="stylesheet" href="{{asset 'timelinejs/css/timeline.css'}}">
<link rel="stylesheet" href="{{asset 'timeline.css'}}">

<div id="timeline-embed"></div>

<script src="/assets/timelinejs/js/timeline.js"></script>

<script>
  // Initialize timeline when DOM is ready
  document.addEventListener("DOMContentLoaded", function() {
    const timelineEmbed = document.getElementById('timeline-embed');
    if (!timelineEmbed) return;
    
    // Get timeline data URL from meta tag
    const metaTag = document.querySelector('meta[name="custom:sheet_url"]');
    const sheetUrl = metaTag ? metaTag.content : null;
    
    if (sheetUrl) {
      // Create timeline with configuration
      window.timeline = new TL.Timeline('timeline-embed', sheetUrl, {
        timenav_position: "bottom",
        initial_zoom: 4,
        scale_factor: 2,
        zoom_sequence: [1,2,3],
        start_at_slide: 0,
        use_bc: false,
        hash_bookmark: false,
        lang: "/assets/timelinejs/timeline-locale.json",
      });
      
      // Set up BCE date removal
      setupBCERemoval();
    } else {
      timelineEmbed.innerHTML = "Missing timeline URL.";
    }
  });
  
  // Remove BCE dates and set up observer to keep them removed
  function setupBCERemoval() {
    // Check for timeline ticks every 200ms
    const checkInterval = setInterval(() => {
      const ticks = document.querySelectorAll('.tl-timeaxis-tick');
      
      if (ticks.length > 0) {
        clearInterval(checkInterval);
        
        // Remove BCE ticks (negative positions)
        removeBCETicks();
        
        // Watch for timeline changes and remove BCE ticks when they appear
        const axis = document.querySelector('.tl-timeaxis-content-container');
        if (axis) {
          const observer = new MutationObserver(removeBCETicks);
          observer.observe(axis, { childList: true, subtree: true });
        }
      }
    }, 200);
    
    // Stop checking after 5 seconds to prevent infinite loop
    setTimeout(() => clearInterval(checkInterval), 5000);
  }
  
  // Remove timeline ticks with negative positions (BCE dates)
  function removeBCETicks() {
    document.querySelectorAll('.tl-timeaxis-tick').forEach(tick => {
      const left = parseFloat(tick.style.left);
      if (left < 0) tick.remove();
    });
  }
</script>

