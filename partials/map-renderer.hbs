{{!-- Map Renderer Partial - A reusable component for rendering Leaflet maps --}}

{{!-- Include common map styles --}}
{{> map-styles}}

<article class="post-full leaflet-map-template map-template">
    <div id="map" style="height: 100vh;"></div>
    <div class="map-data-container">{{mapData}}</div>
</article>

{{!-- Include common map scripts --}}
{{#unless skipScripts}}
{{> map-scripts}}
{{/unless}}

<script>
document.addEventListener("DOMContentLoaded", function () {
    // Get parameters from the parent template
    const imageUrl = "{{imageUrl}}";
    const videoUrl = "{{videoUrl}}";
    const isEmbedMode = {{isEmbedMode}};
    
    // If in embed mode, add the embed-mode class to the body
    if (isEmbedMode) {
        document.body.classList.add('embed-mode');
    }
    
    // Initialize the map only if the map element exists
    const mapElement = document.getElementById('map');
    if (!mapElement) return;

    const img = new Image();
    img.onload = function () {
        const w = this.naturalWidth;
        const h = this.naturalHeight;

        // Full image bounds
        const imageBounds = [[0, 0], [h, w]];

        // Create the map
        const map = L.map("map", {
            crs: L.CRS.Simple,
            preferCanvas: true,
            minZoom: -5,
            maxZoom: 2,
            zoomSnap: 0,
            zoomDelta: 0.25,
            maxBounds: imageBounds
        });

        // Add the image
        L.imageOverlay(imageUrl, imageBounds).addTo(map);
        
        // Add video overlay (ie. clouds) if videoUrl is provided
        if (videoUrl) {
            const videoOverlay = L.videoOverlay(videoUrl, imageBounds, {
                autoplay: true,
                loop: true,
                muted: true,
                opacity: 0.6,
                keepAspectRatio: false
            }).addTo(map);
            
            // Disable picture-in-picture
            disablePiP(videoOverlay);
            
            // Also try after a short delay to ensure the video is loaded
            setTimeout(function() { disablePiP(videoOverlay); }, 100);
        }
        
        // Get viewport height and calculate scale to fit height
        const viewportHeight = window.innerHeight;
        const scale = viewportHeight / h;
        const zoom = Math.log2(scale);

        // Clamp to allowed zooms
        const clampedZoom = Math.max(map.getMinZoom(), Math.min(map.getMaxZoom(), zoom));

        map.setView([h / 2, w / 2], clampedZoom);
        
        // Process map data from post content
        processMapData(map, h, w);
        
        // Fix z-index issues if needed
        if (typeof fixZIndexIssues === 'function') {
            fixZIndexIssues();
        }
    };

    img.src = imageUrl;
});
</script>

