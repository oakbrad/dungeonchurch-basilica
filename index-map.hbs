{{!< default}}
{{!-- The tag above means: insert everything in this file
into the {body} of the default.hbs template --}}


<style>
    .map-description {
        display: inline-block;
        z-index: 10;
        max-width: 960px;
        font-size: 6rem;
        font-weight: 700;
        line-height: 1.1;
    }
    /* Explore Pyora overlay text */
    .explore-pyora-overlay {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 200;
        font-family: 'Waning Star', serif;
        line-height: 1;
        font-size: 10rem;
        color: #fff;
        text-align: center;
        text-shadow: 5px 5px 10px rgba(0, 0, 0, 0.75);
        pointer-events: none;
    }
    .post-feed {
        padding-top: 50px !important;
    }

    /* Gradient fade for the map image */
    .map-gradient-fade {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        height: 200px;
        background: linear-gradient(to bottom, rgba(0, 0, 0, 0) 0%, #151719 100%);
        z-index: 100;
        pointer-events: none;
    }

    /* Map container styles */
    .index-map-container {
        position: relative;
        height: 600px;
        width: 100%;
        overflow: hidden;
    }

    /* Override some map-renderer styles for the index page */
    .index-map-container #map {
        height: 600px !important;
        width: 100% !important;
    }

    /* Full-width map container */
    .map-full-width-container {
        position: relative;
        left: 50%;
        width: 100vw;
        max-width: 100vw;
        transform: translateX(-50%);
        margin-bottom: 50px;
    }

    /* blockquote */
    .map-quote-block {
        position: relative;
        left: 50%;
        width: 100vw;
        max-width: 100vw;           /* never shrink below viewport */
        transform: translateX(-50%);
        box-sizing: border-box;
        padding: 60px 20px 0px;         /* more padding so big quotes have room */
        margin: 40px 0;
        background-color: var(--ghost-accent-color);
        color: white;               /* ensure text is readable on accent bg */
        font-size: 2rem;
        line-height: 1.6;
        font-style: italic;
        text-align: center;
        overflow: hidden;           /* clip anything that goes outside */
    }
    .map-quote-block p {
        position: relative;         /* bring above pseudo-elements */
        z-index: 2;
        max-width: 800px;
        margin: 0 auto 0.5em;
        }
    .credit-quote-block {
        position: relative;         /* above pseudo-elements too */
        z-index: 2;
        text-align: right !important;
        font-size: 1.5em;
        font-weight: bold;
        font-style: normal;
        margin-top: 1em;
        padding-bottom: 0em;
        font-family: 'Waning Star', serif;
    }
    .credit-quote-block i {
        color: rgba(255, 255, 255, 0.4); /* very low-opacity white */
    }
    .map-quote-block::before {
        content: "\201c";               /* Unicode opening double-quote */
        position: absolute;
        top: 5px;                 /* nudge upward or adjust as needed */
        left: 20px;                 /* nudge inward from left edge */
        font-family: serif;         /* a classic serif for a dramatic look */
        font-size: 12rem;           /* very large */
        line-height: 1;
        color: rgba(255, 255, 255, 0.4); /* very low-opacity white */
        z-index: 1;                 /* sit behind the <p> text (which is z-index:2) */
        pointer-events: none;       /* never capture clicks */
    }

    .map-quote-block::after {
        content: "\201d";               /* Unicode closing double-quote */
        position: absolute;
        bottom: -20px;              /* slight nudge downward */
        right: 20px;                /* slight nudge inward from right edge */
        font-family: serif;
        font-size: 12rem;
        line-height: 1;
        color: rgba(255, 255, 255, 0.4);
        z-index: 1;
        pointer-events: none;
    }
</style>

{{!-- The main content area --}}
<main id="site-main" class="site-main outer">

{{!-- Use the interactive map partial with the Pyora map post --}}
<div class="map-full-width-container">
  {{#get "posts" filter="slug:pyora" limit="1" include="html"}}
    {{#foreach posts}}
      <div class="index-map-container">
        <article class="post-full leaflet-map-template">
          <div id="map" style="height: 600px;"></div>
          <div class="map-data-container">{{content}}</div>
        </article>
        
        <!-- Add the Explore Pyora overlay text -->
        <div class="explore-pyora-overlay">Explore Pyora</div>
        <div class="map-gradient-fade"></div>
      </div>

      <script>
      document.addEventListener("DOMContentLoaded", function () {
        // Only initialize the map if the map element exists
        const mapElement = document.getElementById('map');
        if (!mapElement) return;

        const imageUrl = "{{feature_image}}";
        const videoUrl = "/assets/images/overlays/Daytime_Clouds_Squar_One.webm";

        const img = new Image();
        img.onload = function () {
          const w = this.naturalWidth;
          const h = this.naturalHeight;

          // Full image bounds
          const imageBounds = [[0, 0], [h, w]];

          // Create the map
          const map = L.map("map", {
            crs: L.CRS.Simple,
            preferCanvas: true,
            minZoom: -5,
            maxZoom: 2,
            zoomSnap: 0,
            zoomDelta: 0.25,
            maxBounds: imageBounds
          });

          // Add the image
          L.imageOverlay(imageUrl, imageBounds).addTo(map);
          
          // Add video overlay (ie. clouds)
          const videoOverlay = L.videoOverlay(videoUrl, imageBounds, {
            autoplay: true,
            loop: true,
            muted: true,
            opacity: 0.6,
            keepAspectRatio: false
          }).addTo(map);
          
          // Function to disable picture-in-picture
          function disablePiP() {
            try {
              const videoElement = videoOverlay.getElement();
              if (videoElement) {
                // Set the attribute
                videoElement.disablePictureInPicture = true;
                
                // Also add the attribute directly to the DOM element
                videoElement.setAttribute('disablePictureInPicture', '');
              }
            } catch (e) {
              console.error("Error disabling picture-in-picture:", e);
            }
          }
          
          // Try immediately
          disablePiP();
          
          // Also try after a short delay to ensure the video is loaded
          setTimeout(disablePiP, 100);
          
          // Get viewport height and calculate scale to fit height
          const viewportHeight = window.innerHeight;
          const scale = viewportHeight / h;
          const zoom = Math.log2(scale);

          // Clamp to allowed zooms
          const clampedZoom = Math.max(map.getMinZoom(), Math.min(map.getMaxZoom(), zoom));

          map.setView([h / 2, w / 2], clampedZoom);
          
          // Process map data from post content
          processMapData(map, h, w);
        };

        img.src = imageUrl;
        
        /**
         * Process map data from post content
         * Looks for JSON data in the post content and adds markers and other overlays to the map
         */
        function processMapData(map, imageHeight, imageWidth) {
          const mapDataContainer = document.querySelector('.map-data-container');
          if (!mapDataContainer) {
            console.warn('No map data container found');
            return;
          }
          
          try {
            // Find all pre elements that might contain JSON data
            const preElements = mapDataContainer.querySelectorAll('pre');
            
            if (preElements.length === 0) {
              console.warn('No pre elements found in map data container');
              console.log('Map data container content:', mapDataContainer.innerHTML);
            }
            
            preElements.forEach(pre => {
              try {
                // Try to parse the content as JSON
                const content = pre.textContent.trim();
                if (!content.startsWith('{') && !content.startsWith('[')) {
                  console.warn('Pre element does not contain JSON data:', content.substring(0, 50) + '...');
                  return;
                }
                
                const mapData = JSON.parse(content);
                console.log('Successfully parsed map data:', mapData);
                
                // Process the map data
                if (mapData) {
                  // Process markers
                  if (mapData.markers && Array.isArray(mapData.markers)) {
                    mapData.markers.forEach(marker => {
                      if (marker.position && Array.isArray(marker.position) && marker.position.length === 2) {
                        // Convert coordinates to match the image coordinate system if needed
                        const y = marker.position[0];
                        const x = marker.position[1];
                        
                        let markerOptions = {};
                        
                        // Apply custom icon if specified
                        if (marker.icon) {
                          markerOptions.icon = L.icon(marker.icon);
                        } else if (marker.iconType && window.customIcons && window.customIcons[marker.iconType]) {
                          // Use predefined custom icon if iconType is specified
                          markerOptions.icon = window.customIcons[marker.iconType];
                        }
                        
                        // Create the marker
                        const m = L.marker([y, x], markerOptions).addTo(map);
                        
                        // Add popup if specified
                        if (marker.popup) {
                          m.bindPopup(marker.popup);
                        }
                        
                        // Add tooltip if specified
                        if (marker.tooltip) {
                          m.bindTooltip(marker.tooltip);
                        }
                      }
                    });
                  }
                  
                  // Process polylines
                  if (mapData.polylines && Array.isArray(mapData.polylines)) {
                    mapData.polylines.forEach(polyline => {
                      if (polyline.points && Array.isArray(polyline.points)) {
                        const options = polyline.options || {};
                        L.polyline(polyline.points, options).addTo(map);
                      }
                    });
                  }
                  
                  // Process polygons
                  if (mapData.polygons && Array.isArray(mapData.polygons)) {
                    mapData.polygons.forEach(polygon => {
                      if (polygon.points && Array.isArray(polygon.points)) {
                        const options = polygon.options || {};
                        L.polygon(polygon.points, options).addTo(map);
                      }
                    });
                  }
                  
                  // Process circles
                  if (mapData.circles && Array.isArray(mapData.circles)) {
                    mapData.circles.forEach(circle => {
                      if (circle.center && Array.isArray(circle.center) && circle.center.length === 2 && circle.radius) {
                        const options = circle.options || {};
                        L.circle(circle.center, { radius: circle.radius, ...options }).addTo(map);
                      }
                    });
                  }
                  
                  // Process rectangles
                  if (mapData.rectangles && Array.isArray(mapData.rectangles)) {
                    mapData.rectangles.forEach(rectangle => {
                      if (rectangle.bounds && Array.isArray(rectangle.bounds) && rectangle.bounds.length === 2) {
                        const options = rectangle.options || {};
                        L.rectangle(rectangle.bounds, options).addTo(map);
                      }
                    });
                  }
                  
                  // Process custom view settings
                  if (mapData.view) {
                    if (mapData.view.center && Array.isArray(mapData.view.center) && mapData.view.center.length === 2) {
                      const zoom = mapData.view.zoom !== undefined ? mapData.view.zoom : map.getZoom();
                      map.setView(mapData.view.center, zoom);
                    }
                  }
                }
              } catch (e) {
                console.error('Error parsing map data JSON:', e);
              }
            });
          } catch (e) {
            console.error('Error processing map data:', e);
          }
        }
      });
      </script>
    {{/foreach}}
  {{/get}}
</div>

<div class="inner posts">
    <div class="post-card-header"><!-- removed header --></div>
    <div class="post-feed">
        {{#foreach posts limit="3"}}
            {{!-- The tag below includes the markup for each post - partials/post-card.hbs --}}
            {{> "map-card"}}
        {{/foreach}}
    </div>

    {{!-- Quote block that spans full width --}}
    <div class="map-quote-block">
        <p id="quote-text">Even a blind dwarf navigator is worth more than ten sailors with a compass.</p>
        <p class="credit-quote-block"><i>&mdash;</i> <a id="quote-link" href="https://lore.dungeon.church/doc/strezza-pvL6kQtaEA" target="_new"><span id="quote-author">Captain Strezza</span></a></p>
    </div>
    
    <div class="post-feed">
        {{#foreach posts from="4"}}
            {{> "map-card"}}
        {{/foreach}}
    </div>

</div>
</main>

{{!-- Load Leaflet dependencies --}}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script src="{{asset "js/leaflet-custom-icons.js"}}"></script>

{{!-- Simple script for random quotes --}}
<script>
    // Array of quotes
    const quotes = [
        {
            text: "Even a blind dwarf navigator is worth more than ten sailors with a compass.",
            author: "Captain Strezza",
            link: "https://lore.dungeon.church/doc/strezza-pvL6kQtaEA"
        },
        {
            text: "Magic flows like water through the veins of our world. Some merely drink from it; others learn to redirect the current.",
            author: "Estelar",
            link: "https://lore.dungeon.church/doc/estelar-the-heretic-OtEcj9hL0Z"
        },
        {
            text: "Maps are for fools and mortals - the forest is written in it's own ink.",
            author: "Mildred Magpie",
            link: "https://lore.dungeon.church/doc/mildred-magpie-y6vemFK5Bi"
        },
        {
            text: "The sea is our lifeblood, pray to Proteus the tides don't turn against us.",
            author: "Anders Solmor",
            link: "https://lore.dungeon.church/doc/anders-solmor-njTKn6ITMV"
        }
    ];

    // Set random quote on page load
    document.addEventListener('DOMContentLoaded', function() {
        const quote = quotes[Math.floor(Math.random() * quotes.length)];
        document.getElementById('quote-text').textContent = quote.text;
        document.getElementById('quote-author').textContent = quote.author;
        document.getElementById('quote-link').href = quote.link;
    });
</script>

