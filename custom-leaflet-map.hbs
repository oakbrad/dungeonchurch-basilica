{{!< default}}

{{!-- Include common map styles --}}
{{> map-styles}}

{{!-- Debug information to check post data structure --}}
<div class="debug-info" style="display: none;">
    Post exists: {{#if post}}Yes{{else}}No{{/if}}<br>
    Visibility: {{post.visibility}}<br>
    Member exists: {{#if @member}}Yes{{else}}No{{/if}}<br>
    Member paid: {{#if @member.paid}}Yes{{else}}No{{/if}}<br>
    Embed mode: <span id="debug-embed-mode">No</span><br>
    URL: {{url}}
</div>

{{#post}}
    {{!-- Check for embed mode first --}}
    <script>
        // Check for embed parameter in URL
        const urlParams = new URLSearchParams(window.location.search);
        const embedParam = urlParams.get('embed');
        const isEmbedMode = (embedParam === 'true');
        
        // Add embed-mode class if needed
        if (isEmbedMode) {
            document.body.classList.add('embed-mode');
            // Update debug info
            const debugEmbedMode = document.getElementById('debug-embed-mode');
            if (debugEmbedMode) {
                debugEmbedMode.textContent = 'Yes';
            }
            
            // Hide header and footer in embed mode
            document.addEventListener('DOMContentLoaded', function() {
                const header = document.querySelector('.gh-head');
                const footer = document.querySelector('.gh-foot');
                if (header) header.style.display = 'none';
                if (footer) footer.style.display = 'none';
            });
        }
    </script>

    {{!-- Check URL parameters for embed mode --}}
    {{#if (match @url "embed=true")}}
        {{!-- In embed mode, always show the map regardless of visibility --}}
        <article class="post-full leaflet-map-template map-template">
            <div id="map" style="height: 100vh;"></div>
            <div class="map-data-container">{{content}}</div>
        </article>
    {{else}}
        {{!-- Not in embed mode, check visibility --}}
        {{#has visibility="public"}}
            <article class="post-full leaflet-map-template map-template">
                <div id="map" style="height: 100vh;"></div>
                <div class="map-data-container">{{content}}</div>
            </article>
        {{else}}
            {{#has visibility="members"}}
                {{#if @member}}
                    <article class="post-full leaflet-map-template map-template">
                        <div id="map" style="height: 100vh;"></div>
                        <div class="map-data-container">{{content}}</div>
                    </article>
                {{else}}
                    <div class="map-access-message">
                        <h2>This map is available to members</h2>
                        <p>Sign up or log in to view this map.</p>
                        <div class="map-access-cta">
                            <a href="#/portal/signup" class="map-signup-button">Sign up now</a>
                            <a href="#/portal/signin" class="map-signin-button">Log in</a>
                        </div>
                    </div>
                {{/if}}
            {{else}}
                {{#has visibility="paid"}}
                    {{#if @member.paid}}
                        <article class="post-full leaflet-map-template map-template">
                            <div id="map" style="height: 100vh;"></div>
                            <div class="map-data-container">{{content}}</div>
                        </article>
                    {{else}}
                        <div class="map-access-message">
                            <h2>This map is available to paid members</h2>
                            <p>Upgrade your membership to view this map.</p>
                            <div class="map-access-cta">
                                {{#if @member}}
                                    <a href="#/portal/account/plans" class="map-upgrade-button">Upgrade now</a>
                                {{else}}
                                    <a href="#/portal/signup" class="map-signup-button">Sign up now</a>
                                    <a href="#/portal/signin" class="map-signin-button">Log in</a>
                                {{/if}}
                            </div>
                        </div>
                    {{/if}}
                {{else}}
                    <article class="post-full leaflet-map-template map-template">
                        <div id="map" style="height: 100vh;"></div>
                        <div class="map-data-container">{{content}}</div>
                    </article>
                {{/has}}
            {{/has}}
        {{/has}}
    {{/if}}

{{!-- Include common map scripts --}}
{{> map-scripts}}

<script>
document.addEventListener("DOMContentLoaded", function () {
  // Only initialize the map if the map element exists
  const mapElement = document.getElementById('map');
  if (!mapElement) {
    console.warn("No map element found");
    return;
  }

  const imageUrl = "{{feature_image}}";
  const videoUrl = "/assets/images/overlays/Daytime_Clouds_Squar_One.webm"

  const img = new Image();
  img.onload = function () {
    const w = this.naturalWidth;
    const h = this.naturalHeight;

    // Full image bounds
    const imageBounds = [[0, 0], [h, w]];

    // Create the map
    const map = L.map("map", {
      crs: L.CRS.Simple,
      preferCanvas: true,
      minZoom: -5,
      maxZoom: 2,
      zoomSnap: 0,
      zoomDelta: 0.25,
      maxBounds: imageBounds
    });

    // Add the image
    L.imageOverlay(imageUrl, imageBounds).addTo(map);
    
    // Add video overlay (ie. clouds)
    const videoOverlay = L.videoOverlay(videoUrl, imageBounds, {
      autoplay: true,
      loop: true,
      muted: true,
      opacity: 0.6,
      keepAspectRatio: false
    }).addTo(map);
    
    // Disable picture-in-picture
    disablePiP(videoOverlay);
    
    // Also try after a short delay to ensure the video is loaded
    setTimeout(function() { disablePiP(videoOverlay); }, 100);
    
    // Get viewport height and calculate scale to fit height
    const viewportHeight = window.innerHeight;
    const scale = viewportHeight / h;
    const zoom = Math.log2(scale);

    // Clamp to allowed zooms
    const clampedZoom = Math.max(map.getMinZoom(), Math.min(map.getMaxZoom(), zoom));

    map.setView([h / 2, w / 2], clampedZoom);
    
    // Process map data from post content
    processMapData(map, h, w);
    
    // Log debug info
    console.log("Map initialized with dimensions:", w, "x", h);
    console.log("Map data container:", document.querySelector('.map-data-container'));
    
    // Check if we have map data
    const mapDataContainer = document.querySelector('.map-data-container');
    if (mapDataContainer) {
      const preElements = mapDataContainer.querySelectorAll('pre');
      console.log("Found pre elements:", preElements.length);
      
      if (preElements.length === 0) {
        console.warn("No pre elements found in map data container");
        console.log("Map data container content:", mapDataContainer.innerHTML);
      }
    } else {
      console.warn("No map data container found");
    }
  };

  img.src = imageUrl;
});

// Enable debug info with a query parameter
if (window.location.search.includes('debug=true')) {
  document.querySelector('.debug-info').style.display = 'block';
}
</script>
{{/post}}

