{{!< default}}

<style>
    /* Remove site footer and content */
    .site-footer,
    .content-title,
    .post-full-footer,
    .post-content {
        display: none !important;
    }

    /* Styling for access message */
    .map-access-message {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh;
        text-align: center;
        padding: 2rem;
        background: linear-gradient(to bottom right, #3f3f3f, var(--color-darkmode));
        color: #fff;
    }

    .map-access-message h2 {
        font-size: 2.5rem;
        margin-bottom: 1rem;
        color: #fff;
    }

    .map-access-message p {
        font-size: 1.2rem;
        margin-bottom: 2rem;
        max-width: 600px;
    }

    .map-access-cta {
        display: flex;
        gap: 1rem;
        margin-top: 1rem;
    }

    .map-signup-button,
    .map-signin-button,
    .map-upgrade-button {
        display: inline-block;
        padding: 0.8rem 1.5rem;
        border-radius: 4px;
        font-weight: 600;
        text-decoration: none;
        transition: all 0.2s ease;
    }

    .map-signup-button,
    .map-upgrade-button {
        background-color: var(--ghost-accent-color);
        color: #fff;
    }

    .map-signin-button {
        background-color: transparent;
        border: 1px solid #fff;
        color: #fff;
    }

    .map-signup-button:hover,
    .map-upgrade-button:hover {
        opacity: 0.9;
        transform: translateY(-2px);
    }

    .map-signin-button:hover {
        background-color: rgba(255, 255, 255, 0.1);
        transform: translateY(-2px);
    }

    /* Mobile adjustments */
    @media only screen and (max-width: 768px) {
        .map-access-message h2 {
            font-size: 1.8rem;
        }

        .map-access-message p {
            font-size: 1rem;
        }

        .map-access-cta {
            flex-direction: column;
        }
    }
</style>

{{!-- Debug information to check post data structure --}}
<div class="debug-info" style="display: none;">
    Post exists: {{#if post}}Yes{{else}}No{{/if}}<br>
    Visibility: {{post.visibility}}<br>
    Member exists: {{#if member}}Yes{{else}}No{{/if}}<br>
    Member paid: {{#if member.paid}}Yes{{else}}No{{/if}}<br>
    Embed mode: <span id="debug-embed-mode">No</span>
</div>

{{#post}}
    {{!-- We'll use a JavaScript-based approach to handle embed mode --}}
    <div id="map-container">
        {{!-- This div will be populated by JavaScript based on embed mode and visibility --}}
    </div>

    {{!-- For members-only access message template --}}
    <div id="members-access-template" style="display: none;">
        <div class="map-access-message">
            <h2>This map is available to members</h2>
            <p>Sign up or log in to view this map.</p>
            <div class="map-access-cta">
                <a href="#/portal/signup" class="map-signup-button">Sign up now</a>
                <a href="#/portal/signin" class="map-signin-button">Log in</a>
            </div>
        </div>
    </div>

    {{!-- For paid-members-only access message template --}}
    <div id="paid-access-template" style="display: none;">
        <div class="map-access-message">
            <h2>This map is available to paid members</h2>
            <p>Upgrade your membership to view this map.</p>
            <div class="map-access-cta">
                {{#if @member}}
                    <a href="#/portal/account/plans" class="map-upgrade-button">Upgrade now</a>
                {{else}}
                    <a href="#/portal/signup" class="map-signup-button">Sign up now</a>
                    <a href="#/portal/signin" class="map-signin-button">Log in</a>
                {{/if}}
            </div>
        </div>
    </div>

    {{!-- Map template --}}
    <div id="map-template" style="display: none;">
        {{> map-renderer 
            imageUrl=feature_image 
            videoUrl="/assets/images/overlays/Daytime_Clouds_Squar_One.webm"
            isEmbedMode=false
            mapData=content
        }}
    </div>

<script>
document.addEventListener("DOMContentLoaded", function () {
    // Check for embed parameter in URL
    const urlParams = new URLSearchParams(window.location.search);
    const embedParam = urlParams.get('embed');
    const isEmbedMode = (embedParam === 'true');
    
    // Update debug info
    if (isEmbedMode) {
        document.body.classList.add('embed-mode');
        const debugEmbedMode = document.getElementById('debug-embed-mode');
        if (debugEmbedMode) {
            debugEmbedMode.textContent = 'Yes';
        }
    }
    
    // Get post visibility and member status
    const postVisibility = "{{visibility}}";
    const isMember = {{#if @member}}true{{else}}false{{/if}};
    const isPaidMember = {{#if @member.paid}}true{{else}}false{{/if}};
    
    // Get container elements
    const mapContainer = document.getElementById('map-container');
    const mapTemplate = document.getElementById('map-template');
    const membersAccessTemplate = document.getElementById('members-access-template');
    const paidAccessTemplate = document.getElementById('paid-access-template');
    
    // Determine what to show based on embed mode and visibility
    let templateToShow;
    
    if (isEmbedMode) {
        // In embed mode, always show the map regardless of visibility
        templateToShow = mapTemplate;
    } else {
        // Not in embed mode, check visibility
        if (postVisibility === "public") {
            templateToShow = mapTemplate;
        } else if (postVisibility === "members") {
            templateToShow = isMember ? mapTemplate : membersAccessTemplate;
        } else if (postVisibility === "paid") {
            templateToShow = isPaidMember ? mapTemplate : paidAccessTemplate;
        } else {
            // Default case
            templateToShow = mapTemplate;
        }
    }
    
    // Show the selected template
    if (templateToShow && mapContainer) {
        mapContainer.innerHTML = templateToShow.innerHTML;
        
        // If we're showing the map and in embed mode, update the isEmbedMode parameter
        if (templateToShow === mapTemplate && isEmbedMode) {
            // Find the script in the map container and update the isEmbedMode value
            const scripts = mapContainer.querySelectorAll('script');
            scripts.forEach(script => {
                const scriptContent = script.textContent;
                if (scriptContent.includes('isEmbedMode')) {
                    // Replace false with true in the isEmbedMode variable
                    const updatedScript = scriptContent.replace('const isEmbedMode = false', 'const isEmbedMode = true');
                    
                    // Create a new script element with the updated content
                    const newScript = document.createElement('script');
                    newScript.textContent = updatedScript;
                    
                    // Replace the old script with the new one
                    script.parentNode.replaceChild(newScript, script);
                }
            });
        }
    }
    
    // Enable debug info with a query parameter
    if (window.location.search.includes('debug=true')) {
        document.querySelector('.debug-info').style.display = 'block';
    }
});
</script>
{{/post}}

